diff -urx .svn ../../../downloads/openwrt_trunk-q45513/feeds/oldpackages/net/mercurial/Makefile ../../../openwrt_trunk/feeds/oldpackages/net/mercurial/Makefile
--- ../../../downloads/openwrt_trunk-q45513/feeds/oldpackages/net/mercurial/Makefile	2015-04-27 08:56:51.010937253 +0300
+++ ../../../openwrt_trunk/feeds/oldpackages/net/mercurial/Makefile	2015-04-29 07:52:30.558568816 +0300
@@ -8,14 +8,12 @@
 include $(TOPDIR)/rules.mk
 
 PKG_NAME:=mercurial
-PKG_VERSION:=1.8.4
+PKG_VERSION:=3.3.3
 PKG_RELEASE:=1
 
 PKG_SOURCE:=$(PKG_NAME)-$(PKG_VERSION).tar.gz
 PKG_SOURCE_URL:=http://mercurial.selenic.com/release
-PKG_MD5SUM:=b3dcc3de473e003dd1cc0500dcd9de47
-
-PKG_BUILD_DEPENDS:=python-mini
+PKG_MD5SUM:=8648a6980fc12a5a424abe809ab4c6e5
 
 include $(INCLUDE_DIR)/package.mk
 $(call include_mk, python-package.mk)
@@ -41,10 +39,11 @@
 endef
 
 define Package/mercurial/install
-	$(INSTALL_DIR) $(1)/usr/bin
-	$(INSTALL_DIR) $(1)/usr/lib
-	$(CP) $(PKG_INSTALL_DIR)/bin $(1)/usr/
-	$(CP) $(PKG_INSTALL_DIR)/lib $(1)/usr/
+	$(INSTALL_DIR) $(1)/opt/bin
+	$(INSTALL_DIR) $(1)/opt/lib
+	$(CP) $(PKG_INSTALL_DIR)/bin $(1)/opt/
+	$(CP) $(PKG_INSTALL_DIR)/lib $(1)/opt/
+	$(SED) 's!/usr/bin/env python!/Apps/opt/bin/python!' $(1)/opt/bin/hg
 endef
 
 $(eval $(call BuildPackage,mercurial))
diff -urx .svn ../../../downloads/openwrt_trunk-q45513/feeds/oldpackages/net/mercurial/patches/001-no_bzip2.patch ../../../openwrt_trunk/feeds/oldpackages/net/mercurial/patches/001-no_bzip2.patch
--- ../../../downloads/openwrt_trunk-q45513/feeds/oldpackages/net/mercurial/patches/001-no_bzip2.patch	2015-04-27 08:56:51.010937253 +0300
+++ ../../../openwrt_trunk/feeds/oldpackages/net/mercurial/patches/001-no_bzip2.patch	2015-04-28 15:53:47.000000000 +0300
@@ -1,6 +1,7 @@
---- a/mercurial/archival.py
-+++ b/mercurial/archival.py
-@@ -37,7 +37,6 @@ def tidyprefix(dest, kind, prefix):
+diff -aur a/mercurial/archival.py b/mercurial/archival.py
+--- a/mercurial/archival.py	2015-04-01 21:27:41.000000000 +0300
++++ b/mercurial/archival.py	2015-04-28 14:44:02.332405408 +0300
+@@ -44,7 +44,6 @@
  
  exts = {
      'tar': ['.tar'],
@@ -8,7 +9,7 @@
      'tgz': ['.tgz', '.tar.gz'],
      'zip': ['.zip'],
      }
-@@ -51,7 +50,7 @@ def guesskind(dest):
+@@ -58,7 +57,7 @@
  
  class tarit(object):
      '''write archive to tar file or stream.  can write uncompressed,
@@ -17,7 +18,7 @@
  
      class GzipFileWithTime(gzip.GzipFile):
  
-@@ -205,7 +204,6 @@ class fileit(object):
+@@ -223,7 +222,6 @@
  archivers = {
      'files': fileit,
      'tar': tarit,
@@ -25,44 +26,43 @@
      'tgz': lambda name, mtime: tarit(name, mtime, 'gz'),
      'uzip': lambda name, mtime: zipit(name, mtime, False),
      'zip': zipit,
---- a/mercurial/bundlerepo.py
-+++ b/mercurial/bundlerepo.py
-@@ -307,7 +307,7 @@ def getremotechanges(ui, repo, other, re
-             cg = other.changegroup(incoming, "incoming")
+diff -aur a/mercurial/bundlerepo.py b/mercurial/bundlerepo.py
+--- a/mercurial/bundlerepo.py	2015-04-01 21:27:41.000000000 +0300
++++ b/mercurial/bundlerepo.py	2015-04-28 14:53:14.444499800 +0300
+@@ -409,7 +409,7 @@
+             rheads = None
          else:
-             cg = other.changegroupsubset(incoming, revs, 'incoming')
--        bundletype = other.local() and "HG10BZ" or "HG10UN"
-+        bundletype = other.local() and "HG10GZ" or "HG10UN"
-         fname = bundle = changegroup.writebundle(cg, bundlename, bundletype)
+             cg = other.changegroupsubset(incoming, rheads, 'incoming')
+-        bundletype = localrepo and "HG10BZ" or "HG10UN"
++        bundletype = localrepo and "HG10GZ" or "HG10UN"
+         fname = bundle = changegroup.writebundle(ui, cg, bundlename, bundletype)
          # keep written bundle?
          if bundlename:
---- a/mercurial/changegroup.py
-+++ b/mercurial/changegroup.py
-@@ -7,7 +7,7 @@
- 
+diff -aur a/mercurial/changegroup.py b/mercurial/changegroup.py
+--- a/mercurial/changegroup.py	2015-04-01 21:27:41.000000000 +0300
++++ b/mercurial/changegroup.py	2015-04-28 14:47:09.293901368 +0300
+@@ -9,7 +9,7 @@
  from i18n import _
- import util
+ from node import nullrev, nullid, hex, short
+ import mdiff, util, dagutil
 -import struct, os, bz2, zlib, tempfile
 +import struct, os, zlib, tempfile
+ import discovery, error, phases, branchmap
  
- def readexactly(stream, n):
-     '''read n bytes from stream.read and abort if less was available'''
-@@ -45,7 +45,6 @@ class nocompress(object):
- bundletypes = {
-     "": ("", nocompress),
+ _CHANGEGROUPV1_DELTA_HEADER = "20s20s20s20s"
+@@ -73,19 +73,17 @@
+                           # is no capability signaling it.
+     "HG2Y": (), # special-cased below
      "HG10UN": ("HG10UN", nocompress),
 -    "HG10BZ": ("HG10", lambda: bz2.BZ2Compressor()),
      "HG10GZ": ("HG10GZ", lambda: zlib.compressobj()),
  }
  
-@@ -59,14 +58,13 @@ def collector(cl, mmfs, files):
-     return collect
- 
  # hgweb uses this list to communicate its preferred type
 -bundlepriority = ['HG10GZ', 'HG10BZ', 'HG10UN']
 +bundlepriority = ['HG10GZ', 'HG10UN']
  
- def writebundle(cg, filename, bundletype):
+ def writebundle(ui, cg, filename, bundletype, vfs=None):
      """Write a bundle file and return its filename.
  
      Existing files will not be overwritten.
@@ -71,9 +71,9 @@
      The bundle file will be deleted in case of errors.
      """
  
-@@ -124,12 +122,6 @@ def decompressor(fh, alg):
+@@ -145,12 +143,6 @@
              zd = zlib.decompressobj()
-             for chunk in f:
+             for chunk in util.filechunkiter(f):
                  yield zd.decompress(chunk)
 -    elif alg == 'BZ':
 -        def generator(f):
@@ -84,9 +84,37 @@
      else:
          raise util.Abort("unknown bundle compression '%s'" % alg)
      return util.chunkbuffer(generator(fh))
---- a/mercurial/hgweb/hgwebdir_mod.py
-+++ b/mercurial/hgweb/hgwebdir_mod.py
-@@ -204,7 +204,7 @@ class hgwebdir(object):
+diff -aur a/mercurial/commands.py b/mercurial/commands.py
+--- a/mercurial/commands.py	2015-04-01 21:27:41.000000000 +0300
++++ b/mercurial/commands.py	2015-04-28 14:53:42.560412160 +0300
+@@ -383,7 +383,6 @@
+ 
+     :``files``: a directory full of files (default)
+     :``tar``:   tar archive, uncompressed
+-    :``tbz2``:  tar archive, compressed using bzip2
+     :``tgz``:   tar archive, compressed using gzip
+     :``uzip``:  zip archive, uncompressed
+     :``zip``:   zip archive, compressed using deflate
+@@ -1182,7 +1181,6 @@
+ 
+     bundletype = opts.get('type', 'bzip2').lower()
+     btypes = {'none': 'HG10UN',
+-              'bzip2': 'HG10BZ',
+               'gzip': 'HG10GZ',
+               'bundle2': 'HG2Y'}
+     bundletype = btypes.get(bundletype)
+@@ -2165,7 +2163,6 @@
+ 
+     bundletype = opts.get('type', 'bzip2').lower()
+     btypes = {'none': 'HG10UN',
+-              'bzip2': 'HG10BZ',
+               'gzip': 'HG10GZ',
+               'bundle2': 'HG2Y'}
+     bundletype = btypes.get(bundletype)
+diff -aur a/mercurial/hgweb/hgwebdir_mod.py b/mercurial/hgweb/hgwebdir_mod.py
+--- a/mercurial/hgweb/hgwebdir_mod.py	2015-04-01 21:27:41.000000000 +0300
++++ b/mercurial/hgweb/hgwebdir_mod.py	2015-04-28 14:48:02.220522726 +0300
+@@ -249,7 +249,7 @@
          def archivelist(ui, nodeid, url):
              allowed = ui.configlist("web", "allow_archive", untrusted=True)
              archives = []
@@ -95,18 +123,19 @@
                  if i[0] in allowed or ui.configbool("web", "allow" + i[0],
                                                      untrusted=True):
                      archives.append({"type" : i[0], "extension": i[1],
---- a/mercurial/hgweb/hgweb_mod.py
-+++ b/mercurial/hgweb/hgweb_mod.py
-@@ -40,7 +40,7 @@ class hgweb(object):
+diff -aur a/mercurial/hgweb/hgweb_mod.py b/mercurial/hgweb/hgweb_mod.py
+--- a/mercurial/hgweb/hgweb_mod.py	2015-04-01 21:27:41.000000000 +0300
++++ b/mercurial/hgweb/hgweb_mod.py	2015-04-28 14:47:38.269432172 +0300
+@@ -74,7 +74,7 @@
+         self.repostate = ((-1, -1), (-1, -1))
          self.mtime = -1
-         self.size = -1
          self.reponame = name
 -        self.archives = 'zip', 'gz', 'bz2'
 +        self.archives = 'zip', 'gz'
          self.stripecount = 1
          # a repo owner may set web.templates in .hg/hgrc to get any file
          # readable by the user running the CGI script
-@@ -284,7 +284,6 @@ class hgweb(object):
+@@ -388,7 +388,6 @@
                  yield {"type" : i, "extension" : spec[2], "node" : nodeid}
  
      archive_specs = {
@@ -114,70 +143,45 @@
          'gz': ('application/x-gzip', 'tgz', '.tar.gz', None),
          'zip': ('application/zip', 'zip', '.zip', None),
          }
---- a/mercurial/repair.py
-+++ b/mercurial/repair.py
-@@ -19,7 +19,7 @@ def _bundle(repo, bases, heads, node, su
-         os.mkdir(backupdir)
-     name = os.path.join(backupdir, "%s-%s.hg" % (short(node), suffix))
-     if compress:
+diff -aur a/mercurial/repair.py b/mercurial/repair.py
+--- a/mercurial/repair.py	2015-04-01 21:27:41.000000000 +0300
++++ b/mercurial/repair.py	2015-04-28 14:57:11.696410305 +0300
+@@ -43,8 +43,6 @@
+ 
+     if usebundle2:
+         bundletype = "HG2Y"
+-    elif compress:
 -        bundletype = "HG10BZ"
-+        bundletype = "HG10GZ"
      else:
          bundletype = "HG10UN"
-     return changegroup.writebundle(cg, name, bundletype)
---- a/mercurial/commands.py
-+++ b/mercurial/commands.py
-@@ -162,7 +162,6 @@ def archive(ui, repo, dest, **opts):
- 
-     :``files``: a directory full of files (default)
-     :``tar``:   tar archive, uncompressed
--    :``tbz2``:  tar archive, compressed using bzip2
-     :``tgz``:   tar archive, compressed using gzip
-     :``uzip``:  zip archive, uncompressed
-     :``zip``:   zip archive, compressed using deflate
-@@ -644,8 +643,8 @@ def bundle(ui, repo, fname, dest=None, *
-     -a/--all (or --base null).
- 
-     You can change compression method with the -t/--type option.
--    The available compression methods are: none, bzip2, and
--    gzip (by default, bundles are compressed using bzip2).
-+    The available compression methods are: none, and
-+    gzip (by default, bundles are compressed using gzip).
- 
-     The bundle file can then be transferred using conventional means
-     and applied to another repository with the unbundle or pull
-@@ -712,8 +711,8 @@ def bundle(ui, repo, fname, dest=None, *
-     else:
-         cg = repo.changegroup(o, 'bundle')
- 
--    bundletype = opts.get('type', 'bzip2').lower()
--    btypes = {'none': 'HG10UN', 'bzip2': 'HG10BZ', 'gzip': 'HG10GZ'}
-+    bundletype = opts.get('type', 'gzip').lower()
-+    btypes = {'none': 'HG10UN', 'gzip': 'HG10GZ'}
-     bundletype = btypes.get(bundletype)
-     if bundletype not in changegroup.bundletypes:
-         raise util.Abort(_('unknown bundle type specified with --type'))
-@@ -4316,7 +4315,7 @@ table = {
-            _('a base changeset assumed to be available at the destination'),
-            _('REV')),
-           ('a', 'all', None, _('bundle all changesets in the repository')),
--          ('t', 'type', 'bzip2',
-+          ('t', 'type', 'gzip',
-            _('bundle compression type to use'), _('TYPE')),
-          ] + remoteopts,
-          _('[-f] [-t TYPE] [-a] [-r REV]... [--base REV]... FILE [DEST]')),
---- a/setup.py
-+++ b/setup.py
-@@ -36,12 +36,6 @@ except:
-     raise SystemExit(
-         "Couldn't import standard zlib (incomplete Python install).")
- 
--try:
--    import bz2
--except:
--    raise SystemExit(
--        "Couldn't import standard bz2 (incomplete Python install).")
+     return changegroup.writebundle(repo.ui, cg, name, bundletype, vfs)
+diff -aur a/setup.py mercurial-3.3.3/setup.py
+--- a/setup.py	2015-04-01 21:27:41.000000000 +0300
++++ mercurial-3.3.3/setup.py	2015-04-28 14:42:45.480554506 +0300
+@@ -53,16 +53,6 @@
+ except AttributeError:
+     pass
+ 
+-if isironpython:
+-    sys.stderr.write("warning: IronPython detected (no bz2 support)\n")
+-else:
+-    try:
+-        import bz2
+-        bz2.BZ2Compressor # silence unused import warning
+-    except ImportError:
+-        raise SystemExit(
+-            "Couldn't import standard bz2 (incomplete Python install).")
 -
- import os, subprocess, time
+ import os, stat, subprocess, time
+ import re
  import shutil
- import tempfile
+@@ -318,9 +308,6 @@
+             self.distribution.ext_modules = []
+         else:
+             h = os.path.join(get_python_inc(), 'Python.h')
+-            if not os.path.exists(h):
+-                raise SystemExit('Python headers are required to build '
+-                                 'Mercurial but weren\'t found in %s' % h)
+ 
+     def find_modules(self):
+         modules = build_py.find_modules(self)
