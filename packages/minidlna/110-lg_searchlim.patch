--- a/minidlna.c
+++ b/minidlna.c
@@ -866,6 +866,9 @@
 		case MAX_CONNECTIONS:
 			runtime_vars.max_connections = atoi(ary_options[i].value);
 			break;
+		case SEARCH_LIMIT:
+			search_limit = atoi(ary_options[i].value);
+			break;
 		case MERGE_MEDIA_DIRS:
 			if (strtobool(ary_options[i].value))
 				SETFLAG(MERGE_MEDIA_DIRS_MASK);
--- a/options.c
+++ b/options.c
@@ -64,10 +64,11 @@
 	{ USER_ACCOUNT, "user" },
 	{ FORCE_SORT_CRITERIA, "force_sort_criteria" },
 	{ MAX_CONNECTIONS, "max_connections" },
+	{ MERGE_MEDIA_DIRS, "merge_media_dirs" },
 #ifndef THUMBNAIL_CREATION	
-	{ MERGE_MEDIA_DIRS, "merge_media_dirs" }
+	{ SEARCH_LIMIT, "search_limit" }
 #else
-	{ MERGE_MEDIA_DIRS, "merge_media_dirs" },
+	{ SEARCH_LIMIT, "search_limit" },
 	{ ENABLE_THUMB, "enable_thumbnail" },
 	{ THUMB_WIDTH, "thumbnail_width" },
 	{ THUMB_QUALITY, "thumbnail_quality" },
--- a/options.h
+++ b/options.h
@@ -57,10 +57,11 @@
 	USER_ACCOUNT,			/* user account to run as */
 	FORCE_SORT_CRITERIA,		/* force sorting by a given sort criteria */
 	MAX_CONNECTIONS,		/* maximum number of simultaneous connections */
+	MERGE_MEDIA_DIRS,		/* don't add an extra directory level when there are multiple media dirs */
 #ifndef THUMBNAIL_CREATION	
-	MERGE_MEDIA_DIRS		/* don't add an extra directory level when there are multiple media dirs */
+	SEARCH_LIMIT 		        /* limit search object results */
 #else
-	MERGE_MEDIA_DIRS,		/* don't add an extra directory level when there are multiple media dirs */
+	SEARCH_LIMIT, 		        /* limit search object results */
 	ENABLE_THUMB,                   /* enable thumbnail generation */
 	THUMB_WIDTH,                    /* thunbnail image with */
 	THUMB_QUALITY,                  /* thumnail image quality */
--- a/upnpglobalvars.c
+++ b/upnpglobalvars.c
@@ -92,3 +92,4 @@
 volatile short int quitting = 0;
 volatile uint32_t updateID = 0;
 const char *force_sort_criteria = NULL;
+int search_limit = -1;
--- a/upnpglobalvars.h
+++ b/upnpglobalvars.h
@@ -235,5 +235,6 @@
 extern volatile short int quitting;
 extern volatile uint32_t updateID;
 extern const char *force_sort_criteria;
+extern int search_limit;
 
 #endif
--- a/upnpsoap.c
+++ b/upnpsoap.c
@@ -1775,6 +1775,15 @@
 			goto search_error;
 		}
 	}
+        /* Search limit check */
+	if (search_limit >= 0) 
+	{
+         if (totalMatches > search_limit)
+          totalMatches = search_limit;
+
+         if ((StartingIndex + RequestedCount) > search_limit)
+          RequestedCount = search_limit - StartingIndex;
+        }
 	ret = 0;
 	__SORT_LIMIT
 	orderBy = parse_sort_criteria(SortCriteria, &ret);
